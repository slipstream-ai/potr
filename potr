#!/bin/bash

# Simple script to run build commands in docker.

set -e

version="latest"

if [ ! -f "potr.conf" ]
then
    echo "This directory doesn't appear to be a potr project root. No potr.conf file found."
fi

source potr.conf

tempFileName="/tmp/potr.$$"
hashDockerPath="/tmp/potr.hash.$$"
lockFileName="potr.sum"

mkdir -p /tmp/potr-build

aws='docker run --rm -t $(tty &>/dev/null && echo "-i") -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}" -v "$(pwd):/project" mesosphere/aws-cli'

run_print() {
    echo $1
    eval $1
}

build_container() {
    # Always build the docker image; because of caching it is cheap
    run_print "cd build-container; docker build --iidfile $tempFileName -t potr-temp-$$ ."
    cd ..

    if [ $? -ne 0 ]
    then
        # If the build command failed, then exit
        exit $?
    fi

    # Use the id instead of the tag so we can support multiple different
    # versions building on the same machine.
    id=`cat $tempFileName`
    shortId=${id: -14}
    rm $tempFileName

    run_print "docker tag $id $name-build-$shortId"
    docker rmi potr-temp-$$

    check_and_update_lock_file
}

check_and_update_lock_file() {
    # Get a hash of the build container
    mkdir -p $hashDockerPath

    docker inspect -f '{{range $index, $value := .Config.Env}}{{println $value}}{{end}}' $id > $hashDockerPath/env
    docker inspect -f '{{json .Config.Cmd}}' $id > $hashDockerPath/cmd
    docker inspect -f '{{json .Config.Entrypoint}}' $id > $hashDockerPath/entrypoint

    hashDir="/potr/to-hash"

    cat << EOF > $hashDockerPath/Dockerfile
    FROM $id

    FROM ubuntu:bionic-20190718

    # Copy over the contents of the build container and metadata from the container.
    COPY --from=0 / $hashDir/data
    COPY env cmd entrypoint $hashDir/mdata/
    RUN chmod -R 664 $hashDir/mdata/*

    WORKDIR $hashDir

    # Hash all the data and mdata files. Ignore mtimes, since they will change each time you
    # rebuild the container.
    RUN tar --mtime='2019-01-01 00:00Z' --sort=name -cf - . | md5sum > /potr/hash

    WORKDIR /potr

    # Generate a testing script used if we fail
    RUN echo "cd $hashDir; find . -type f -print0 | sort -z | xargs -0 md5sum" > /potr/print_hashes.sh
    RUN echo "find . -print0 | sort -z | xargs -0 stat -c \"%N %F %G %U %a\"" >> /potr/print_hashes.sh

    CMD ["cat", "hash"]
EOF

    docker build -t $name-build-$shortId-hash $hashDockerPath

    rm -rf $hashDockerPath

    hash=`docker run --rm $name-build-$shortId-hash`

    # If the lock file exists, check the id of the built container against it
    if [ -f $lockFileName ]
    then
        lockedHash=`cat $lockFileName`
        if [ "$hash" != "$lockedHash" ]
        then
            echo ""
            echo "*****************************************************************"
            echo "Locked container doesn't equal built container"
            echo " Locked hash: $lockedHash"
            echo " Built hash:  $hash"
            echo ""
            echo "If you have updated the build container definition run \"potr update\""
            echo "to update the lock file. If not, you probably have a non-stable build"
            echo "container, which you need to fix."
            echo "Saving container description..."
            echo ""

            describe_build_container

            exit 1
        fi
    else
        echo "Updating lock file."
        echo "$hash" > $lockFileName
    fi
}

deploy_container() {
    run_print "docker build --iidfile $tempFileName -t $name ."

    if [ $? -ne 0 ]
    then
        # If the build command failed, then exit
        exit $?
    fi

    # Use the id instead of the tag so we can support multiple different
    # versions building on the same machine.
    did=`cat $tempFileName`
    rm $tempFileName
}

describe_build_container() {
    docker run --rm $name-build-$shortId-hash bash /potr/print_hashes.sh > /tmp/potr-build/build-container-description
}

run_build() {
    build_container

    # Run the given command in the build container. If nothing is provided, default
    # the build container default.
    run_print "docker run -ti --rm $build_args $id $@"
}

run_deploy() {
    deploy_container

    # Run the given command in the deploy container. If nothing is provided, default
    # the deploy container default.
    run_print "docker run -ti --rm $run_args $did $@"
}

if [ "$#" -eq 0 ]
then
    run_build "$@"
    exit $?
fi

if [ $1 == "-d" ]
then
    set -x
    shift
fi

# Try again to make dbuild -d work
if [ "$#" -eq 0 ]
then
    run_build "$@"
    exit $?
fi

if [ $1 == "help" ] || [ $1 == "-h" ] || [ $1 == "--help" ]
then
    cat << EOF

Potr is a simple container build script. it is meant only to perform common out-of-container operations (build a build container, run it etc.) Run with no arguments it will run the build container without passing any arguments.

Commands:

    build [args]- run the build container, optionally providing extra commands (or arguments) to the build container.
    deploy - run the build container and create a deploy container locally.
    update - update the locked build container definition.
    clean - remove the build and deployment containers for this project.
    drun 'cmd' - run the given command inside a deploy container.
    push - build the deployment container and push it to the repo noted in the potr.conf file
    deploy - build the deployment container and put it in the local docker images.

EOF

    exit 0
fi

if [ $1 == "build" ]
then
    shift
    run_build "$@"
    exit $?
fi

if [ $1 == "update" ]
then
    rm $lockFileName
    build_container
    exit 0
fi

if [ $1 == "drun" ]
then
    run_build

    shift

    run_deploy
    exit $?
fi

if [ $1 == "deploy-container" ]
then
    deploy_container
    exit $?
fi

if [ $1 == "build-container" ]
then
    build_container
    exit $?
fi

if [ $1 == "clean" ]
then
    images=`docker images -q $name-build-*`
    docker rmi $images
    exit $?
fi

if [ $1 == "aws-docker-login" ]
then
    cmd="$aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION | tr -d '\r\n' | bash"
    run_print 'bash -c "$cmd"'
fi

if [ $1 == "deploy" ]
then
    # Build the code
    run_build
    if [ $? -ne 0 ]
    then
        # If the build command failed, then exit
        exit $?
    fi

    # Build the deploy container.
    deploy_container
    if [ $? -ne 0 ]
    then
        # If the build command failed, then exit
        exit $?
    fi
fi

if [ $1 == "push" ]
then
    docker_repo=$2
    shift
    shift
    tags=$@

    echo $tags

    # Build the deploy container.
    deploy_container
    if [ $? -ne 0 ]
    then
        # If the build command failed, then exit
        exit $?
    fi

    for version in ${tags}
    do
        run_print "docker tag $did $docker_repo:$version"
        run_print "docker push $docker_repo:$version"
    done
fi
